@model EPSN.Trainee

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="form-horizontal">
            <div class="header-slidee">
                <section id="teamm" class="lightt">
                    <h2>Fill <span>out</span> the <span>form</span> </h2>
                    <span class="section-separator"></span>
                </section>
                </div>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.ValidationMessageFor(model => model.E_mail, "", new { @class = "text-danger" })
                    @Html.LabelFor(model => model.E_mail, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.E_mail, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10 ">
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @id = "phone" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.ValidationMessageFor(model => model.Extra_Notes, "", new { @class = "text-danger" })
                    @Html.LabelFor(model => model.Extra_Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Extra_Notes, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.ValidationMessageFor(model => model.CouresName_Id, "", new { @class = "text-danger" })
                    @Html.LabelFor(model => model.CouresName_Id, "Coures Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("CouresName_Id", null, htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Enroll Now" class="btn btn-primary" id="save" />
                    </div>
                </div>
            </div>
        </div>
    <div class="card text-white bg-secondary my-5 py-4 text-center " id="message">
        <div class="card-body">
            <p id="mess" class="text-white m-0" style=" padding: 30px; text-align: center;">Thank you for enrolling in our course, we hope you will find it useful then We will contact you in 48 hours.</p>
        </div>
    </div>
}
@section scripts{
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script>
        var input = document.querySelector("#phone"),
            errorMsg = document.querySelector("#error-msg"),
            validMsg = document.querySelector("#valid-msg");
        // here, the index maps to the error code returned from getValidationError - see readme
        var errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];
        // initialise plugin
        var iti = window.intlTelInput(input, {
            utilsScript: "~/build/js/utils.js"
        });
        var reset = function () {
            input.classList.remove("error");
            errorMsg.innerHTML = "";
            errorMsg.classList.add("hide");
            validMsg.classList.add("hide");
        };
        // on keyup / change flag: reset
        input.addEventListener('change', reset);
        input.addEventListener('keyup', reset);
    </script>
    <script>
        $(function () {
            $("#save").click(function () {
                $("#message").fadeIn();
                $("#mess").append("");
            });
        });
    </script>
    <script src="~/Scripts/jquery-1.11.3.min.js"></script>
}
